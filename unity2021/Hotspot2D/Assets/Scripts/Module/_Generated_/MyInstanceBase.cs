
//*************************************************************************************
//   !!! Generated by the fmp-cli 1.9.1.  DO NOT EDIT!
//*************************************************************************************

using System.Threading.Tasks;
using UnityEngine;
using LibMVCS = XTC.FMP.LIB.MVCS;
using XTC.FMP.MOD.Hotspot2D.LIB.Bridge;
using XTC.FMP.MOD.Hotspot2D.LIB.MVCS;
using XTC.FMP.MOD.Hotspot2D.LIB.Proto;

namespace XTC.FMP.MOD.Hotspot2D.LIB.Unity
{
    public class MyInstanceBase
    {
        public LibMVCS.Logger logger { get; set; }
        public GameObject rootUI { get; set; }


        public IDesignerViewBridge viewBridgeDesigner { get; set; }

        public IHealthyViewBridge viewBridgeHealthy { get; set; }



        protected virtual void submitDesignerReadStyleSheet(ScopeRequest _request)
        {
            var dto = new ScopeRequestDTO(_request);
            Task.Run(async () =>
            {
                try
                {
                    var reslut = await viewBridgeDesigner.OnReadStyleSheetSubmit(dto);
                    if (!LibMVCS.Error.IsOK(reslut))
                    {
                        logger.Error(reslut.getMessage());
                    }
                }
                catch (System.Exception ex)
                {
                    logger.Exception(ex);
                }
            });
        }

        protected virtual void submitDesignerWriteStyle(DesignerWriteStylesRequest _request)
        {
            var dto = new DesignerWriteStylesRequestDTO(_request);
            Task.Run(async () =>
            {
                try
                {
                    var reslut = await viewBridgeDesigner.OnWriteStyleSubmit(dto);
                    if (!LibMVCS.Error.IsOK(reslut))
                    {
                        logger.Error(reslut.getMessage());
                    }
                }
                catch (System.Exception ex)
                {
                    logger.Exception(ex);
                }
            });
        }

        protected virtual void submitDesignerReadInstances(ScopeRequest _request)
        {
            var dto = new ScopeRequestDTO(_request);
            Task.Run(async () =>
            {
                try
                {
                    var reslut = await viewBridgeDesigner.OnReadInstancesSubmit(dto);
                    if (!LibMVCS.Error.IsOK(reslut))
                    {
                        logger.Error(reslut.getMessage());
                    }
                }
                catch (System.Exception ex)
                {
                    logger.Exception(ex);
                }
            });
        }

        protected virtual void submitDesignerWriteInstances(DesignerWriteInstancesRequest _request)
        {
            var dto = new DesignerWriteInstancesRequestDTO(_request);
            Task.Run(async () =>
            {
                try
                {
                    var reslut = await viewBridgeDesigner.OnWriteInstancesSubmit(dto);
                    if (!LibMVCS.Error.IsOK(reslut))
                    {
                        logger.Error(reslut.getMessage());
                    }
                }
                catch (System.Exception ex)
                {
                    logger.Exception(ex);
                }
            });
        }

        protected virtual void submitHealthyEcho(HealthyEchoRequest _request)
        {
            var dto = new HealthyEchoRequestDTO(_request);
            Task.Run(async () =>
            {
                try
                {
                    var reslut = await viewBridgeHealthy.OnEchoSubmit(dto);
                    if (!LibMVCS.Error.IsOK(reslut))
                    {
                        logger.Error(reslut.getMessage());
                    }
                }
                catch (System.Exception ex)
                {
                    logger.Exception(ex);
                }
            });
        }


    }
}
